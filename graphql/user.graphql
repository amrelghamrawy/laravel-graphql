scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

extend type Query{
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq 
      # @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq
      #  @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}


type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    #has many relation 
    posts: [Post!]! @hasMany

    avatar: String
}



type Mutation{
  createUser(name:String!,email:String! @rules(apply:["email" , "unique:users"]) ,password:String! @rules(apply:["min:8"]) ): User! @create 
  updateUser(id:ID! , name:String ,email: String): User! @update
  deleteUser(id: ID! @whereKey): User @delete
  upsertUser(id: ID!, name: String!, email:String , password:String ): User @upsert
  updateUserAvatar(image: Upload! , id: ID!): User
}
